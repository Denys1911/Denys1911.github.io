'use strict';

function Task(id, name, priority, status = 'open') {
    this.id = id;
    this.name = name;
    this.priority = priority;
    this.status = status;
}
function prepareData(storageName) {
    const storageData = localStorage.getItem(storageName);

    if (storageData) {
        return JSON.parse(storageData);
    }

    let myRequest = new XMLHttpRequest();

    myRequest.open('GET', '../../data/data.json', false);
    myRequest.send();

    if (myRequest.status === 200) {
        console.log(myRequest.status + ': ' + myRequest.statusText);
    } else {
        return JSON.parse(myRequest.responseText);
    }
}

/*function prepareData(storageName) {
    const storageData = localStorage.getItem(storageName);

    if (storageData) {
        return JSON.parse(storageData);
    }

    return fetch('../../data/data.json')
        .then(response => response.json())
        .then(result => result);
}*/


function controlTasks() {
    const todoList = document.querySelector('.todo-list');

    tasksArr = prepareData(TASKS_STORAGE_NAME);
    todoList.innerHTML = createAllTasksHTML(tasksArr);
    todoList.addEventListener('click', handleClickOnTodoList);
}
function createTaskHTML(task) {
    const {id, name, status, priority} = task;

    return `
        <li class="todo-list-item" data-id="${id}">
            <div class="todo-list-item-top">
                <span class="task-name">${name}</span>
                <div>
                    <button class="edit-btn">Edit</button>
                    <button class="delete-btn">Delete</button> 
                </div>
            </div>
            <div class="todo-list-item-bottom">
                <div>
                    <span><i>Current status:</i> ${status}</span>
                    <select>
                        <option value="">Select status</option>
                        <option value="open">Open</option>
                        <option value="in progress">In progress</option>
                        <option value="done">Done</option>
                    </select>
                    <button class="change-status-btn">Change status</button>
                </div>
                <div>
                    <span class="${priority}"><i>Current priority:</i> ${priority}</span>
                    <select>
                        <option value="">Select priority</option>
                        <option value="low">Low</option>
                        <option value="medium">Medium</option>
                        <option value="high">High</option>
                    </select>
                    <button class="change-priority-btn">Change priority</button>
                </div>
            </div>
            <div class="todo-list-item-info"></div>
        </li>
    `;
}

function createAllTasksHTML(tasksArr) {
    return tasksArr.map(createTaskHTML).join('');
}
function controlModalWindowAction() {
    const modalWindowWrapper = document.querySelector('.modal-wrapper');
    const modalWrapperClassName = 'show-modal-wrapper';
    const addTaskBtn = document.querySelector('.add-btn');
    const closeModalWindowBtn = document.querySelector('.close-btn');

    controlOpeningOfModalWindow();
    controlClosingOfModalWindow();

    function controlOpeningOfModalWindow() {
        addTaskBtn.addEventListener('click', handleClickOnAddTaskBtn);

        function handleClickOnAddTaskBtn() {
            addClassForElements(modalWrapperClassName, modalWindowWrapper);
            document.addEventListener('keydown', handleKeyDownOnDocument);
        }
    }

    function controlClosingOfModalWindow() {
        closeModalWindowBtn.addEventListener('click', handleClickOnCloseModalWindowBtn);

        function handleClickOnCloseModalWindowBtn() {
            removeClassFromElements(modalWrapperClassName, modalWindowWrapper);
            document.removeEventListener('keydown', handleKeyDownOnDocument);
        }
    }

    function handleKeyDownOnDocument(e) {
        if (e.key === 'Escape') {
            removeClassFromElements(modalWrapperClassName, modalWindowWrapper);
            document.removeEventListener('keydown', handleKeyDownOnDocument);
        }
    }
}
function controlModalFormConfirmation() {
    const submitFormBtn = document.querySelector('.submit-form-btn');
    const form = document.querySelector('.modal-form');
    const modalWindowWrapper = document.querySelector('.modal-wrapper');
    const todoList = document.querySelector('.todo-list');

    submitFormBtn.addEventListener('click', handleClickOnSubmitFormBtn);

    function handleClickOnSubmitFormBtn() {
        hideAllErrorMessages(form);

        if (!validateFormOrShowErrorMessage(form)) {
            return;
        }

        const taskId = getIdForNewTask(tasksArr);
        const formData = getFormData(form);
        const newTask = new Task(taskId, ...formData);
        tasksArr.push(newTask);
        updateTasksListAndLocalStorage(tasksArr, todoList, TASKS_STORAGE_NAME);
        removeClassFromElements('show-modal-wrapper', modalWindowWrapper);
        clearAllFormFields(form);
    }
}
function handleClickOnTodoList(e) {
    const todoList = document.querySelector('.todo-list');
    const targetedElement = e.target;

    if (targetedElement.classList.contains('edit-btn')) {
        handleClickOnEditBtn();
    }

    if (targetedElement.classList.contains('confirm-name-changing-btn')) {
        handleClickOnConfirmNameChangingBtn();
    }

    if (targetedElement.classList.contains('delete-btn')) {
        handleClickOnDeleteBtn();
    }

    if (targetedElement.classList.contains('confirm-deletion-btn')) {
        handleClickOnConfirmDeletionBtn();
    }

    if (targetedElement.classList.contains('cancel-deletion-btn')) {
        handleClickOnCancelDeletionBtn();
    }

    if (targetedElement.classList.contains('change-status-btn')) {
        handleClickOnChangeStatusOrPriorityBtn('status');
    }

    if (targetedElement.classList.contains('change-priority-btn')) {
        handleClickOnChangeStatusOrPriorityBtn('priority');
    }

    function handleClickOnEditBtn() {
        const [, infoBlock] = getTargetedElementWrapperAndInfoBlock();

        infoBlock.innerHTML = createTaskNameChangingForm();
    }

    function handleClickOnConfirmNameChangingBtn() {
        const [targetedElementWrapper] = getTargetedElementWrapperAndInfoBlock();
        const taskId = getTaskIdFromAttribute(targetedElementWrapper);
        const form = targetedElement.parentNode;

        hideAllErrorMessages(form);

        if (!validateFormOrShowErrorMessage(form)) {
            return;
        }

        const newTaskName = form.querySelector('.task-name-input').value;
        const taskDataArr = getTaskData(tasksArr, taskId);
        taskDataArr.name = newTaskName;
        updateTasksListAndLocalStorage(tasksArr, todoList, TASKS_STORAGE_NAME);
    }

    function handleClickOnDeleteBtn() {
        const [, infoBlock] = getTargetedElementWrapperAndInfoBlock();
        infoBlock.innerHTML = createConfirmDeletionBlock(infoBlock);
    }

    function handleClickOnConfirmDeletionBtn() {
        const [targetedElementWrapper] = getTargetedElementWrapperAndInfoBlock();
        const taskId = getTaskIdFromAttribute(targetedElementWrapper);
        const taskIndex = getTaskIndex(tasksArr, taskId);
        tasksArr.splice(taskIndex, 1);
        updateTasksListAndLocalStorage(tasksArr, todoList, TASKS_STORAGE_NAME);
    }

    function handleClickOnCancelDeletionBtn() {
        const [, infoBlock] = getTargetedElementWrapperAndInfoBlock();
        infoBlock.innerHTML = '';
    }

    function handleClickOnChangeStatusOrPriorityBtn(name) {
        const [targetedElementWrapper, infoBlock] = getTargetedElementWrapperAndInfoBlock();
        const selectedValue = targetedElement.previousElementSibling.value;
        const taskId = getTaskIdFromAttribute(targetedElementWrapper);

        if (!selectedValue) {
            infoBlock.innerHTML = createErrorMessage(`Please, select ${name} first`);
            return;
        }

        const taskDataArr = getTaskData(tasksArr, taskId);
        taskDataArr[name] = selectedValue;
        updateTasksListAndLocalStorage(tasksArr, todoList, TASKS_STORAGE_NAME);
    }

    function getTargetedElementWrapperAndInfoBlock() {
        const targetedElementWrapper = targetedElement.closest('.todo-list-item');
        const infoBlock = targetedElementWrapper.querySelector('.todo-list-item-info');

        return [targetedElementWrapper, infoBlock];
    }

    function getTaskIdFromAttribute(wrapper) {
        const taskId = wrapper.dataset.id;
        return parseInt(taskId);
    }
}
function addClassForElements(className, ...elements) {
    elements.forEach(element => element.classList.add(className));
}

function removeClassFromElements(className, ...elements) {
    elements.forEach(element => element.classList.remove(className));
}

function validateFormOrShowErrorMessage(form) {
    for (let formElement of form) {
        if (!formElement.value) {
            showErrorMessage(formElement.parentNode);
            return false;
        }
    }

    return true;
}

function showErrorMessage(element) {
    removeClassFromElements('hide', element.nextElementSibling);
}

function hideAllErrorMessages(wrapper) {
    const errorMessages = wrapper.querySelectorAll('.error-message');
    addClassForElements('hide', ...errorMessages);
}

function clearAllFormFields(form) {
    for (let formElement of form) {
        if (formElement.type === 'button') {
            continue;
        }

        formElement.value = '';
    }
}

function getFormData(form) {
    let formData = [];

    for (let formElement of form) {
        if (formElement.type === 'button') {
            continue;
        }

        formData.push(formElement.value);
    }

    return formData;
}

function getIdForNewTask(tasksArr) {
    if (!tasksArr.length) {
        return 1;
    }

    const indexOfLastTaskInArr = tasksArr.length - 1;
    const idOfLastTaskInArr = tasksArr[indexOfLastTaskInArr].id;

    return idOfLastTaskInArr + 1;
}

function updateTasksListAndLocalStorage(tasksArr, tasksList, storageName) {
    tasksList.innerHTML = createAllTasksHTML(tasksArr);
    localStorage.setItem(storageName, JSON.stringify(tasksArr));
}

function getTaskData(tasksArr, taskId) {
    return tasksArr.find(task => task.id === taskId);
}

function getTaskIndex(tasksArr, taskId) {
    return tasksArr.findIndex(task => task.id === taskId);
}

function createConfirmDeletionBlock() {
    return `
        <div class="confirm-deletion-block">
            <span>Are you sure?</span>
            <div>
                <button class="confirm-deletion-btn">Confirm</button>
                <button class="cancel-deletion-btn">Cancel</button>
            </div>
        </div>
    `;
}

function createTaskNameChangingForm() {
    return `
        <form class="change-task-name-form">
            <label>
                Enter new task name:
                <input type="text" class="task-name-input" placeholder="Name...">
            </label>
             <div class="error-message hide">Please, fill this field first</div>
            <input type="button" class="confirm-name-changing-btn" value="Submit">
        </form>
    `;
}

function createErrorMessage(errorText) {
    return `<div class="error-message">${errorText}</div>`;
}
const TASKS_STORAGE_NAME = 'todo-list';
let tasksArr;

controlTasks();
controlModalWindowAction();
controlModalFormConfirmation();

